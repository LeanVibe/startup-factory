# NeoForge Project Rules and Patterns

## Frontend Development Patterns

### Web Component Events
- **Event Naming Convention**: Use `neo-` prefix for all custom events (e.g., `neo-dismiss`, `neo-select`)
- **Event Detail Object**: Always include a `detail` object with relevant data when dispatching events
- **Event Propagation**: Set `bubbles: true` and `composed: true` for events that need to cross shadow DOM boundaries

### Animation Handling
- **Pattern**: When animating elements out, wait for animation to complete before changing state:
  ```javascript
  // Pattern for animating out elements
  close() {
    if (!this._visible) return;
    this._clearDismissTimeout();
    this.classList.remove('animating-in');
    this.classList.add('animating-out');
    
    // Wait for animation to complete before changing state
    setTimeout(() => {
      this.dispatchEvent(
        new CustomEvent('neo-dismiss', {
          bubbles: true,
          composed: true,
          detail: { id: this.id }
        })
      );
      this._visible = false;
      this.requestUpdate();
    }, 200); // Match animation duration
  }
  ```

### Component Content Handling
- **Pattern**: When handling component content that could come from either direct text content or slotted content, use this pattern:
  ```javascript
  updated(changedProperties) {
    super.updated(changedProperties);
    // Wait for the next microtask to ensure content is updated
    Promise.resolve().then(() => {
      // Try to get content from direct text content first
      let content = this.textContent.trim();

      // If no direct content, try to get it from slot
      if (!content) {
        const slot = this.shadowRoot.querySelector("slot");
        const nodes = slot.assignedNodes();
        content = nodes
          .map((node) => node.textContent)
          .join("")
          .trim();
      }

      if (content) {
        this.title = content;
        // Force a re-render to update the title attribute in the template
        this.requestUpdate();
      }
    });
  }
  ```

### Component Testing
- **Test Coverage**: Every web component needs tests for:
  1. Rendering with default properties
  2. Attribute/property reflection
  3. Event dispatching
  4. Animation/transition behavior
  5. Accessibility compliance
- **Test Timeouts**: Consider adding timeouts for tests that might hang:
  ```javascript
  it('should handle complex operations', function(done) {
    this.timeout(5000); // Set timeout to 5 seconds
    
    // Test logic here
    
    done();
  });
  ```

## Backend Development Patterns

### API Endpoint Structure
- **Path Format**: `/api/v1/<resource>/<action>`
- **HTTP Methods**: Use appropriate HTTP methods (GET, POST, PUT, DELETE)
- **Response Format**: Always return consistent JSON structure with status, data, and error fields

### Error Handling
- **Error Codes**: Use standard HTTP status codes
- **Error Messages**: Include human-readable error messages
- **Validation Errors**: Return detailed validation errors for each field

## Project Workflow

### Testing Strategy
- **Fix One Issue at a Time**: Address test failures individually, commit after each fix
- **Test Filtering**: Use `--testNamePattern` to run specific tests while debugging
- **Test First Development**: Write tests before implementing new features
- **Handling Hanging Tests**: If a test consistently hangs, consider:
  1. Adding explicit timeouts
  2. Breaking the test into smaller, more focused tests
  3. Checking for infinite loops or unresolved promises
  4. Using `--bail` flag to stop after first failure

### Documentation Requirements
- **Memory Bank Updates**: Update Memory Bank files after significant changes
- **Component Documentation**: Document component properties, events, and examples
- **API Documentation**: Ensure OpenAPI documentation stays current

## Known Issues and Solutions

### Event Timing Issues
- **Issue**: Event dispatching before animation completes
- **Solution**: Use setTimeout to wait for animation to complete before dispatching events

### Test Environment Setup
- **Issue**: Tests failing due to environment setup
- **Solution**: Ensure proper setup and teardown in test files

### Component Reactivity
- **Issue**: Component not updating after property changes
- **Solution**: Call `requestUpdate()` after manual property changes

### Test Execution Hanging
- **Issue**: Tests hanging indefinitely, particularly with badge.test.js
- **Solution**: 
  1. Add explicit timeouts to tests
  2. Check for infinite loops in component lifecycle methods
  3. Ensure all promises are properly resolved
  4. Consider using `--bail` flag to stop after first failure

## User Preferences

### Code Organization
- Prefer small, focused components with clear responsibilities
- Use consistent naming conventions across the codebase
- Keep CSS modular and scoped to components

### Development Workflow
- Prioritize fixing failing tests before adding new features
- Maintain comprehensive documentation in Memory Bank
- Regularly update progress tracking 